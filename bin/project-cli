#!/bin/bash

# Configuration Variables
REPO_DIR="$HOME/.project-templates"
TEMPLATES_DIR="$REPO_DIR/templates"
FEATURES_DIR="$REPO_DIR/features"
VERBOSE=false
PROJECT_CLI_CONFIG_FILE="project-cli.json"

# List of filenames to ignore during the copy process
IGNORED_FILES_TEMPLATE=("LICENSE" $PROJECT_CLI_CONFIG_FILE)
IGNORED_FILES_FEATURE=("README.md" "LICENSE")

# Color codes for output
INFO_COLOR='\033[0;34m'      # Blue for informational messages
PROMPT_COLOR='\033[0;32m'    # Green for prompts
HIGHLIGHT_COLOR='\033[0;33m' # Green for highlights
ERROR_COLOR='\033[0;31m'     # Red for errors
DIM='\033[2m'                # Dimmed text for secondary information
NC='\033[0m'                 # No color

# Global state variable for user choice
CHOICE_ALL=6

show_error() {
  echo -e "${ERROR_COLOR}Error: $1${NC}"
}

show_info() {
  echo -e "${INFO_COLOR}$1${NC}"
}

show_dim() {
  echo -e "${DIM}$1${NC}"
}

show_prompt() {
  echo -en "${PROMPT_COLOR}$1${NC}"
  if [ "${2:-true}" = true ]; then
    echo ""
  fi
}

show_highlight() {
  echo -e "${HIGHLIGHT_COLOR}$1${NC}"
}

# Function to handle errors with detailed output
handle_error() {
  show_error "$1"
  exit 1
}

# Function to check if a string exists in an array
contains_element() {
  local array=("${!1}") # Access the array passed as the first argument
  local element="$2"    # The element to search for
  for item in "${array[@]}"; do
    if [[ "$item" == "$element" ]]; then
      return 0 # Found the element, return success
    fi
  done
  return 1 # Element not found, return failure
}

# Function to merge two arrays and remove duplicates
merge_arrays() {
  local array1=("${!1}")
  local array2=("${!2}")
  local merged_array=()

  # Merge array1 and array2, avoiding duplicates
  merged_array=("${array1[@]}" "${array2[@]}")
  printf '%s\n' "${merged_array[@]}" | sort -u | tr '\n' ' '
}

# Function to run a command silently with dim output in verbose mode
run_command_silently() {
  local output
  output=$("$@" 2>&1)
  local status=$?

  if [ "$VERBOSE" = true ]; then
    show_dim "$output"
  fi

  if [ $status -ne 0 ]; then
    handle_error "Failed to run the command: $*\n$output"
  fi

  return $status
}

# Function to convert absolute path to relative path from given base directory
get_relative_path() {
  local file_path="$1"
  local base_dir="$2"
  local relative_path="${file_path#"$base_dir"/}"
  echo "$relative_path"
}

# Merge JSON files, concatenating arrays instead of overwriting them
# Function to merge JSON files, concatenating arrays instead of overwriting them
#
# Parameters:
#   - target_file: The path to the target JSON file.
#   - source_file: The path to the source JSON file.
#
# Example usage:
#   $ ./project-cli target.json source.json
merge_json_files() {
  local target_file="$1"
  local source_file="$2"

  # Strip comments from JSON files before merging
  sed -E 's|//.*$||g; s|/\*.*\*/||g' "$target_file" >"$target_file.stripped"
  sed -E 's|//.*$||g; s|/\*.*\*/||g' "$source_file" >"$source_file.stripped"

  # This script merges two JSON files using the custom function deepmerge.
  # The deepmerge function recursively merges two JSON objects or arrays.
  # It takes two arguments: a and b, which represent the objects or arrays to be merged.
  # If both a and b are objects, the function merges their properties recursively.
  # If both a and b are arrays, the function concatenates them.
  # If either a or b is not an object or array, the function returns b.
  # The merged result is then saved to the target file.
  jq -s '
      def deepmerge(a; b):
        if (a | type) == "object" and (b | type) == "object" then
          reduce (b | to_entries[]) as $item (a;
            .[$item.key] =  if .[$item.key] == null then $item.value
                            else deepmerge(.[$item.key]; $item.value)
                            end
          )
        elif (a | type) == "array" and (b | type) == "array" then
          a + b
        else
          b
        end;
      deepmerge(.[0]; .[1])' "$target_file.stripped" "$source_file.stripped" >"$target_file.tmp" && mv "$target_file.tmp" "$target_file"

  # Clean up temporary files
  rm -f "$target_file.stripped" "$source_file.stripped"
}

# Function to merge files if they already exist
copy_or_merge_file() {
  local source_file="$1"
  local target_file="$2"
  local feature="$3"

  local target_dir
  target_dir=$(dirname "$target_file")

  # Ensure the target directory exists
  if [ ! -d "$target_dir" ]; then
    mkdir -p "$target_dir"
  fi

  if [ ! -f "$target_file" ]; then
    cp "$source_file" "$target_file"
  else
    local relative_target_path
    local relative_source_path
    relative_target_path=$(get_relative_path "$target_file" "$CURRENT_DIR")
    relative_source_path=$(get_relative_path "$source_file" "$FEATURES_DIR")

    if [ -z "$CHOICE_ALL" ]; then
      # Ask user whether to skip, replace, or merge the file
      show_prompt "\nFile $relative_target_path already exists. Choose an option:"
      show_prompt "1) Skip"
      show_prompt "2) Replace"
      show_prompt "3) Merge"
      show_prompt "4) Skip All"
      show_prompt "5) Replace All"
      show_prompt "6) Merge All (default)"
      show_prompt "\nEnter your choice (1/2/3/4/5/6): " false
      read -ra choice </dev/tty

      # If no input is given (i.e., user hits enter), default to "6) Merge All"
      if [ -z "${choice[0]}" ]; then
        choice[0]=6
      fi
    else
      choice[0]=$CHOICE_ALL
    fi

    case ${choice[0]} in
    4)
      CHOICE_ALL=1
      choice[0]=1
      ;;
    5)
      CHOICE_ALL=2
      choice[0]=2
      ;;
    6)
      CHOICE_ALL=3
      choice[0]=3
      ;;
    esac

    case ${choice[0]} in
    1)
      msg="Skipped: $relative_source_path (from $feature)"
      skipped_files+=("$msg")
      show_dim "$msg"
      ;;
    2)
      cp "$source_file" "$target_file"
      msg="Replaced: $relative_target_path with $relative_source_path (from $feature)"
      replaced_files+=("$msg")
      show_dim "$msg"
      ;;
    3)
      if [[ "$target_file" == *.json ]]; then
        merge_json_files "$target_file" "$source_file"
      else
        # append file
        grep -Fxqf "$source_file" "$target_file" || cat "$source_file" >>"$target_file"
      fi
      msg="Merged: $relative_source_path into $relative_target_path (from $feature)"
      merged_files+=("$msg")
      show_dim "$msg"
      ;;
    *)
      show_error "Invalid choice '${choice[0]}'. Skipping source file $relative_source_path."
      skipped_files+=("Skipped: $relative_source_path (from $feature) [Invalid choice]")
      ;;
    esac
  fi
}

# Function to copy and potentially merge files
copy_and_merge_files() {
  local source_dir="$1"
  local target_dir="$2"
  local ignored_files=("${!3}")

  while IFS= read -r -d '' file; do
    # Calculate the relative path of the file within the source directory
    relative_path="${file#"$source_dir"/}"
    filename=$(basename "$file")

    # Set the target file path by appending the relative path to the project directory
    target_file="$target_dir/$relative_path"

    # Check if the file is in the ignored list
    if contains_element ignored_files[@] "$filename"; then
      show_dim "Ignoring $filename as it is in the ignored files list."
      continue
    fi

    # Merge the file if it already exists, otherwise just copy it
    copy_or_merge_file "$file" "$target_file"
  done < <(find "$source_dir" -type f -print0)
}

# Function to check for updates in the template repository
check_repo_updates() {
  show_info "Checking for updates in the template repository..."
  run_command_silently git -C "$REPO_DIR" stash || handle_error "Failed to stash changes on repository. Please check your repository settings and internet connection."
  run_command_silently git -C "$REPO_DIR" pull || handle_error "Failed to update the repository. Please check your repository settings and internet connection."
  show_info "Templates updated successfully."
}

# Function to load template configuration
get_base_template_from_template_config() {
  local template="$1"

  # Path to the template configuration file
  local template_config_file="$TEMPLATES_DIR/$template/$PROJECT_CLI_CONFIG_FILE"

  # Check if the PROJECT_CLI_CONFIG_FILE file exists and read it
  if [ -f "$template_config_file" ]; then
    sed -E 's|//.*$||g; s|/\*.*\*/||g' "$template_config_file" | jq -r '.baseTemplate // ""'
  fi
}

# Function to load template configuration
get_enabled_features_from_template_config() {
  local template="$1"
  local enabled_features=()

  # Path to the template configuration file
  local template_config_file="$TEMPLATES_DIR/$template/$PROJECT_CLI_CONFIG_FILE"

  # Check if the PROJECT_CLI_CONFIG_FILE file exists and read it
  if [ -f "$template_config_file" ]; then
    read -ra enabled_features <<<"$(sed -E 's|//.*$||g; s|/\*.*\*/||g' "$template_config_file" | jq -r '.features[]' | tr '\n' ' ')"
    echo "${enabled_features[@]}"
  fi
}

# Function to validate project name (kebab-case)
validate_project_name() {
  local project_name="$1"
  if [[ ! "$project_name" =~ ^[a-z0-9]+(-[a-z0-9]+)*$ ]]; then
    echo 1
  fi
}

# Function to check the new project directory
check_project_directory_is_available() {
  local project_name="$1"

  if [ -d "$CURRENT_DIR/$project_name" ]; then
    echo 1
  fi
}

# Function to prompt for project name and validate it
prompt_project_name() {
  # TODO do not use globals: receive and return `project_name`
  if [ -z "$project_name" ]; then
    while true; do
      show_prompt "Enter the name of the new project: " false
      read -r project_name

      if [[ -n "$(validate_project_name "$project_name")" ]]; then
        show_error "Invalid project name '$project_name'. The project name must be in kebab-case (e.g., my-project-name)."
        continue
      fi
      if [[ -n "$(check_project_directory_is_available "$project_name")" ]]; then
        show_error "Project directory '$project_name' already exists in $CURRENT_DIR."
        continue
      fi
      break
    done
  elif [[ -n "$(validate_project_name "$project_name")" ]]; then
    handle_error "Invalid project name '$project_name'. The project name must be in kebab-case (e.g., my-project-name)."
  elif [[ -n "$(check_project_directory_is_available "$project_name")" ]]; then
    handle_error "Project directory '$project_name' already exists in $CURRENT_DIR."
  fi
}

# Function to create the project directory and copy template files
create_project() {
  local template="$1"
  local project_name="$2"
  local base_template

  # Create the project directory in the current directory
  if ! check_project_directory_is_available "$project_name"; then
    handle_error "Project directory '$project_name' already exists in $CURRENT_DIR."
  fi
  mkdir "$CURRENT_DIR/$project_name" || handle_error "Failed to create the project directory."

  # Function to copy the base template
  copy_base_template() {
    local base_template="$1"
    local project_name="$2"
    local child_base_template

    # copy recursively `baseTemplate` of `baseTemplate` until `baseTemplate` is empty
    child_base_template=$(get_base_template_from_template_config "$base_template")
    if [ -n "$child_base_template" ]; then
      copy_base_template "$child_base_template" "$project_name"
    fi

    show_info "Copying base template '$base_template'..."
    if [ -d "$TEMPLATES_DIR/$base_template" ]; then
      copy_and_merge_files "$TEMPLATES_DIR/$base_template" "$CURRENT_DIR/$project_name" IGNORED_FILES_TEMPLATE[@]
    else
      handle_error "Base template '$base_template' not found."
    fi
  }

  # Copy the base template if specified
  base_template=$(get_base_template_from_template_config "$template")
  if [ -n "$base_template" ]; then
    copy_base_template "$base_template" "$project_name"
  fi

  # Copy the selected template files
  if [ -d "$TEMPLATES_DIR/$template" ]; then
    copy_and_merge_files "$TEMPLATES_DIR/$template" "$CURRENT_DIR/$project_name" IGNORED_FILES_TEMPLATE[@]
    show_info "\nProject '$project_name' created based on template '$template' in $CURRENT_DIR."
  else
    handle_error "Template '$template' not found."
  fi
}

# Interactive template selection
select_template() {
  local template
  local templates=()
  local index=1
  local template_index
  local terminal

  # Get the terminal device
  terminal=$(tty)

  show_info "\nAvailable project templates:" >"$terminal"
  for dir in "$TEMPLATES_DIR"/*/; do
    template=$(basename "$dir")
    show_info "$index) $template" >"$terminal"
    templates+=("$template")
    index=$((index + 1))
  done

  show_prompt "\nSelect a project template by number: " false >"$terminal"
  read -r template_index
  template="${templates[$((template_index - 1))]}"

  if [ -z "$template" ]; then
    handle_error "Invalid selection. Exiting." >"$terminal"
  fi

  echo "$template"
}

# Function to enable features from the template
enable_features_from_template() {
  local enabled_features=("${!1}")
  local template="$2"
  local template_enabled_features
  local base_template

  # merge `features` from `template` with `enabled_features`
  read -ra template_enabled_features <<<"$(get_enabled_features_from_template_config "$template")"
  read -ra enabled_features <<<"$(merge_arrays enabled_features[@] template_enabled_features[@])"

  # copy recursively `baseTemplate` of `template` until `baseTemplate` is empty
  base_template=$(get_base_template_from_template_config "$template")
  if [ -n "$base_template" ]; then
    read -ra enabled_features <<<"$(enable_features_from_template enabled_features[@] "$base_template")"
  fi

  echo "${enabled_features[@]}"
}

# Interactive feature selection
select_features() {
  local enabled_features=("${!1}")
  local feature
  local features=()
  local preselected=()
  local terminal

  terminal=$(tty)

  index=1
  show_info "\nAvailable features:" >"$terminal"
  for dir in "$FEATURES_DIR"/*/; do
    feature=$(basename "$dir")

    # Check if this feature is preselected in the template configuration
    if contains_element enabled_features[@] "$feature"; then
      show_info "$index) $feature *" >"$terminal"
      preselected+=("$index")
    else
      show_info "$index) $feature" >"$terminal"
    fi

    features+=("$feature")
    index=$((index + 1))
  done
  show_info "    (* preselected by template)" >"$terminal"

  # Convert preselected indices to space-separated string
  preselected_string=$(
    IFS=" "
    echo "${preselected[*]}"
  )

  show_prompt "Enter the numbers of the additional features you want to integrate (space-separated): [${preselected_string}] " false >"$terminal"
  read -ra selections

  # If the user just hits enter, use the preselected features
  if [ -z "${selections[*]}" ]; then
    selections=("${preselected[@]}")
  fi

  # Convert selected indices to feature names
  for i in "${selections[@]}"; do
    if [[ "$i" =~ ^[0-9]+$ ]] && ((i >= 1 && i <= ${#features[@]})); then
      enabled_features+=("${features[$((i - 1))]}")
    else
      handle_error "Invalid selection: $i" >"$terminal"
    fi
  done

  echo "${enabled_features[@]}"
}

# Function to integrate selected features and merge files
integrate_features() {
  local selected_features=("$@")
  local filename
  local relative_path
  local target_file

  for feature in "${selected_features[@]}"; do
    FEATURE_PATH="$FEATURES_DIR/$feature"
    if [ -d "$FEATURE_PATH" ]; then
      show_info "\nIntegrating feature '$feature'..."
      copy_and_merge_files "$FEATURE_PATH" "$CURRENT_DIR/$project_name" IGNORED_FILES_FEATURE[@]
    else
      handle_error "Feature $feature not found."
    fi
  done
}

# Function to display files
display_files() {
  local label="$1"
  local files=("${!2}")

  if [ ${#files[@]} -gt 0 ]; then
    show_info "${label}:"
    for file in "${files[@]}"; do
      show_dim "$file"
    done
  fi
}

# Function to display a summary of file actions
display_file_action_summary() {
  show_info "\nSummary of file actions:"
  display_files "Skipped files" skipped_files[@]
  display_files "Replaced files" replaced_files[@]
  display_files "Merged files" merged_files[@]
}

# Function to parse command-line arguments
parse_arguments() {
  while [[ "$#" -gt 0 ]]; do
    case $1 in
    --verbose) VERBOSE=true ;;
    -t | --template)
      template="$2"
      shift
      ;;
    -n | --name)
      project_name="$2"
      shift
      ;;
    -f | --features)
      IFS=',' read -ra features <<<"$2"
      shift
      ;;
    -h | --help)
      show_info "Usage: project-cli [--verbose] [-t template] [-n project_name] [-f features]"
      exit 0
      ;;
    *) handle_error "Unknown parameter passed: $1" ;;
    esac
    shift
  done
}

# Arrays to keep track of file actions
skipped_files=()
merged_files=()
replaced_files=()

# Main Logic
main() {
  CURRENT_DIR=$(pwd)

  # TODO do not use globals: return `template`, `project_name` and `features` from `parse_arguments`
  parse_arguments "$@"

  # Check for updates in the template repository
  check_repo_updates

  # If not provided via arguments, ask for template selection interactively
  if [ -z "$template" ]; then
    template=$(select_template "$template")
  fi

  # Enable features defined in template configuration
  enabled_features=()
  read -ra enabled_features <<<"$(enable_features_from_template enabled_features[@] "$template")"

  # Call the prompt_project_name function
  prompt_project_name

  # Create the project directory and copy template files
  create_project "$template" "$project_name"

  # Merge the param features with the enabled features from the template
  if [ -n "${features[0]}" ]; then
    read -ra enabled_features <<<"$(merge_arrays features[@] enabled_features[@])"
  else
    # If no features are provided via arguments, ask for features interactively
    read -ra enabled_features <<<"$(select_features enabled_features[@])"
  fi

  # Call the integrate_features function with the selected features
  integrate_features "${enabled_features[@]}"

  # Display a summary of file actions
  display_file_action_summary

  show_highlight "\nProject setup for '$project_name' complete.\n"
}

main "$@"
