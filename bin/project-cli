#!/bin/bash

# Configuration
TEMPLATES_DIR="$HOME/.project-templates/templates"
COMMON_DIR="$HOME/.project-templates/common"

# Color codes for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No color

# Function to handle errors
handle_error() {
  echo -e "${RED}Error: $1${NC}"
  exit 1
}

# Function to run a command and apply dim color to its output
run_command_with_dim_output() {
  local output
  output=$("$@" 2>&1)
  local status=$?
  echo -e "${DIM}${output}${NC}"
  return $status
}

# Interactive template selection
select_template() {
  echo -e "${YELLOW}Available project templates:${NC}"
  templates=()
  index=1
  for dir in "$TEMPLATES_DIR"/*/; do
    template=$(basename "$dir")
    echo "$index) $template"
    templates+=("$template")
    index=$((index + 1))
  done

  read -p "Select a project template by number: " template_index
  template="${templates[$((template_index - 1))]}"

  if [ -z "$template" ]; then
    handle_error "Invalid selection. Exiting."
  fi
}

# Interactive feature selection
select_features() {
  echo -e "${YELLOW}Available features:${NC}"
  features=()
  index=1
  for dir in "$COMMON_DIR"/*/; do
    feature=$(basename "$dir")
    echo "$index) $feature"
    features+=("$feature")
    index=$((index + 1))
  done

  read -p "Enter the numbers of the features you want to integrate (space-separated): " -a selections

  selected_features=()
  for i in "${selections[@]}"; do
    if [[ "$i" =~ ^[0-9]+$ ]] && ((i >= 1 && i <= ${#features[@]})); then
      selected_features+=("${features[$((i - 1))]}")
    else
      echo -e "${RED}Invalid selection: $i${NC}"
    fi
  done
}

# Parse arguments
while [[ "$#" -gt 0 ]]; do
  case $1 in
  -t | --template)
    template="$2"
    shift
    ;;
  -n | --name)
    project_name="$2"
    shift
    ;;
  -f | --features)
    features="$2"
    shift
    ;;
  -h | --help)
    echo -e "${YELLOW}Usage: project-cli [-t template] [-n project_name] [-f features]${NC}"
    exit 0
    ;;
  *) handle_error "Unknown parameter passed: $1" ;;
  esac
  shift
done

# If not provided via arguments, ask for template and project name
if [ -z "$template" ]; then
  select_template
fi

if [ -z "$project_name" ]; then
  read -p "Enter the name of the new project: " project_name
fi

# Create the project directory in the current directory
CURRENT_DIR=$(pwd)
if [ -d "$TEMPLATES_DIR/$template" ]; then
  cp -R "$TEMPLATES_DIR/$template" "$CURRENT_DIR/$project_name"
  echo -e "${GREEN}Project '$project_name' created based on template '$template' in $CURRENT_DIR.${NC}"
else
  handle_error "Template '$template' not found."
fi

# If not provided via arguments, ask for features interactively
if [ -z "$features" ]; then
  select_features
else
  IFS=',' read -ra selected_features <<<"$features"
fi

# Integrate selected features
for feature in "${selected_features[@]}"; do
  FEATURE_PATH="$COMMON_DIR/$feature"
  if [ -d "$FEATURE_PATH" ]; then
    echo -e "${GREEN}Integrating $feature...${NC}"
    cp -R "$FEATURE_PATH/." "$CURRENT_DIR/$project_name"
  else
    echo -e "${RED}Feature $feature not found.${NC}"
  fi
done

echo -e "${GREEN}Project setup complete.${NC}"
