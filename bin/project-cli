#!/bin/bash

# Configuration Variables
TEMPLATES_DIR="$HOME/.project-templates/templates"
FEATURES_DIR="$HOME/.project-templates/features"
REPO_DIR="$HOME/.project-templates"
VERBOSE=false

# Color codes for output
INFO_COLOR='\033[0;34m'   # Blue for informational messages
PROMPT_COLOR='\033[0;32m' # Green for prompts
RED='\033[0;31m'          # Red for errors
DIM='\033[2m'
NC='\033[0m' # No color

# Function to handle errors with detailed output
handle_error() {
  echo -e "${RED}Error: $1${NC}"
  [ -n "$2" ] && echo -e "${RED}$2${NC}"
  exit 1
}

# Function to run a command silently with dim output in verbose mode
run_command_silently() {
  local output
  output=$("$@" 2>&1)
  local status=$?

  if [ "$VERBOSE" = true ]; then
    echo -e "${DIM}${output}${NC}"
  fi

  if [ $status -ne 0 ]; then
    handle_error "Failed to run the command: $*" "$output"
  fi

  return $status
}

# Interactive template selection
select_template() {
  echo -e "\n${INFO_COLOR}Available project templates:${NC}"
  templates=()
  index=1
  for dir in "$TEMPLATES_DIR"/*/; do
    template=$(basename "$dir")
    echo -e "${INFO_COLOR}$index) $template${NC}"
    templates+=("$template")
    index=$((index + 1))
  done

  printf "${PROMPT_COLOR}Select a project template by number:${NC} "
  read template_index
  template="${templates[$((template_index - 1))]}"

  if [ -z "$template" ]; then
    handle_error "Invalid selection. Exiting."
  fi
}

# Interactive feature selection
select_features() {
  echo -e "\n${INFO_COLOR}Available features:${NC}"
  features=()
  index=1
  for dir in "$FEATURES_DIR"/*/; do
    feature=$(basename "$dir")
    echo -e "${INFO_COLOR}$index) $feature${NC}"
    features+=("$feature")
    index=$((index + 1))
  done

  printf "${PROMPT_COLOR}Enter the numbers of the features you want to integrate (space-separated):${NC} "
  read -a selections

  selected_features=()
  for i in "${selections[@]}"; do
    if [[ "$i" =~ ^[0-9]+$ ]] && ((i >= 1 && i <= ${#features[@]})); then
      selected_features+=("${features[$((i - 1))]}")
    else
      echo -e "${RED}Invalid selection: $i${NC}"
    fi
  done
}

# Main Logic

# Parse arguments
while [[ "$#" -gt 0 ]]; do
  case $1 in
  --verbose) VERBOSE=true ;;
  -t | --template)
    template="$2"
    shift
    ;;
  -n | --name)
    project_name="$2"
    shift
    ;;
  -f | --features)
    features="$2"
    shift
    ;;
  -h | --help)
    echo -e "${INFO_COLOR}Usage: project-cli [--verbose] [-t template] [-n project_name] [-f features]${NC}"
    exit 0
    ;;
  *) handle_error "Unknown parameter passed: $1" ;;
  esac
  shift
done

# Check for updates in the template repository
echo -e "${INFO_COLOR}Checking for updates in the template repository...${NC}"
run_command_silently git -C "$REPO_DIR" pull || handle_error "Failed to update the repository. Please check your internet connection or repository settings."
echo -e "${INFO_COLOR}Templates updated successfully.${NC}"

# If not provided via arguments, ask for template and project name
if [ -z "$template" ]; then
  select_template
fi

if [ -z "$project_name" ]; then
  printf "${PROMPT_COLOR}Enter the name of the new project:${NC} "
  read project_name
fi

# Create the project directory in the current directory
CURRENT_DIR=$(pwd)
if [ -d "$TEMPLATES_DIR/$template" ]; then
  run_command_silently cp -R "$TEMPLATES_DIR/$template" "$CURRENT_DIR/$project_name" || handle_error "Failed to create the project directory."
  echo -e "\n${INFO_COLOR}Project '$project_name' created based on template '$template' in $CURRENT_DIR.${NC}"
else
  handle_error "Template '$template' not found."
fi

# If not provided via arguments, ask for features interactively
if [ -z "$features" ]; then
  select_features
else
  IFS=',' read -ra selected_features <<<"$features"
fi

# Integrate selected features
for feature in "${selected_features[@]}"; do
  FEATURE_PATH="$FEATURES_DIR/$feature"
  if [ -d "$FEATURE_PATH" ]; then
    echo -e "${INFO_COLOR}Integrating $feature...${NC}"
    run_command_silently cp -R "$FEATURE_PATH/." "$CURRENT_DIR/$project_name" || handle_error "Failed to integrate feature $feature."
  else
    echo -e "${RED}Feature $feature not found.${NC}"
  fi
done

echo -e "\n${INFO_COLOR}Project setup complete.${NC}"
